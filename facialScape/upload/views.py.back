import os
import zipfile
from deepface import DeepFace
import plotly.express as px
import plotly.io as pio
from django.shortcuts import render, redirect
from .forms import ZipUploadForm
from .models import AnalysisResults


def handle_uploaded_file(zip_file):
    analysis_data = {}
    with zipfile.ZipFile(zip_file) as z:
        z.extractall(path='temp')
        for root, dirs, files in os.walk('temp'):
            for dir in dirs:
                for file in os.listdir(os.path.join(root, dir)):
                    if file.endswith(('.jpg', '.png', '.jpeg')):
                        img_path = os.path.join(root, dir, file)
                        analysis = DeepFace.analyze(img_path=img_path, actions=['emotion', 'age', 'gender', 'race'])
                        analysis_data[img_path] = analysis
    return analysis_data

def upload_and_analyze(request):
    if request.method == 'POST':
        form = ZipUploadForm(request.POST, request.FILES)
        if form.is_valid():
            analysis_results = form.save()
            analysis_data = handle_uploaded_file(analysis_results.zip_file.path)
            analysis_results.analysis_data = analysis_data
            analysis_results.save()
            return redirect('display_results', analysis_results.id)
    else:
        form = ZipUploadForm()
    return render(request, 'upload.html', {'form': form})

def display_results(request, analysis_results_id):
    analysis_results = AnalysisResults.objects.get(id=analysis_results_id)
    analysis_data = analysis_results.analysis_data
    
    
    figs = []
    avg_emotion = {}
    avg_age = []
    avg_gender = []
    avg_race = {}
    for img_path, analysis_list in analysis_data.items():
        if analysis_list and isinstance(analysis_list[0], dict):
            analysis = analysis_list[0]  # Access the first item in the list to get the dictionary
            
            # Generate data for averages
            for emotion, value in analysis['emotion'].items():
                avg_emotion[emotion] = avg_emotion.get(emotion, 0) + value
            avg_age.append(analysis['age'])
            avg_gender.append(1 if analysis['gender'] == 'Man' else 0)
            for race, value in analysis['race'].items():
                avg_race[race] = avg_race.get(race, 0) + value

            # Individual Graphs
            emotion_fig = px.bar(
                x=list(analysis['emotion'].keys()), 
                y=list(analysis['emotion'].values()), 
                labels={'x': 'Emotion', 'y': 'Score'}, 
                title=f'Emotions for {img_path}'
            )
            figs.append(pio.to_html(emotion_fig, full_html=False))

    # Averaging data
    avg_emotion = {k: v / len(analysis_data) for k, v in avg_emotion.items()}
    avg_race = {k: v / len(analysis_data) for k, v in avg_race.items()}
    avg_age_value = sum(avg_age) / len(avg_age) if avg_age else 0
    avg_gender_value = sum(avg_gender) / len(avg_gender) if avg_gender else 0
    
    # Average Graphs
    avg_emotion_fig = px.bar(
        x=list(avg_emotion.keys()), 
        y=list(avg_emotion.values()), 
        labels={'x': 'Emotion', 'y': 'Average Score'}, 
        title='Average Emotions'
    )
    figs.append(pio.to_html(avg_emotion_fig, full_html=False))

    avg_race_fig = px.bar(
        x=list(avg_race.keys()), 
        y=list(avg_race.values()), 
        labels={'x': 'Race', 'y': 'Average Score'}, 
        title='Average Race'
    )
    figs.append(pio.to_html(avg_race_fig, full_html=False))

    return render(
        request, 
        'results.html', 
        {
            'figs': figs, 
            'avg_age': avg_age_value, 
            'avg_gender': f'Male: {avg_gender_value * 100:.2f}%, Female: {100 - avg_gender_value * 100:.2f}%'
        }
    )
